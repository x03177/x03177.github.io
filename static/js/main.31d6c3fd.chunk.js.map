{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","delete","bind","assertThisInitialized","mark","_this$props","todo","deleteTodo","id","_this$props2","markTodo","console","log","react_default","a","createElement","className","concat","isCompleted","text","onClick","type","Component","App","state","todos","todoText","filter","handleChange","addTodo","todoData","window","localStorage","getItem","oldTodos","JSON","parse","setState","length","prevProps","prevState","setItem","stringify","e","target","value","_this$state","toConsumableArray","map","objectSpread","_this2","_this$state2","name","placeholder","aria-label","aria-describedby","onChange","src_Todo","key","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31d6c3fd.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\n\nclass Todo extends Component {\n  constructor(props){\n    super(props)\n    \n    this.delete = this.delete.bind(this)\n    this.mark = this.mark.bind(this)\n  }\n  delete() {\n    const {todo, deleteTodo} = this.props\n    deleteTodo(todo.id)\n  }\n  mark() {\n    const {todo, markTodo} = this.props\n    markTodo(todo.id)\n  }\n\n  render() {\n    const { todo } = this.props\n    console.log(todo)\n    return(\n      <div className={`list-group-item d-flex justify-content-between align-items-center list_item ${todo.isCompleted ? 'completed' : ''}`}>\n        <div className=\"list_item_text\">\n          {todo.isCompleted ? <del>{todo.text}</del> : todo.text } \n        </div>\n        <div className=\"list_item_action\">\n          <button className={`btn ${todo.isCompleted ? 'btn-success' : 'btn-outline-secondary'} list_item_mark`} onClick={this.mark}>\n            {todo.isCompleted ? '已完成' : '未完成'}\n          </button>\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary list_item_del\" type=\"button\" onClick={this.delete}>X</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Todo\n","import React, {Component} from 'react'\nimport Todo from './Todo.js'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      todoText: '',\n      filter: 'all'\n    };\n    this.id = 1\n\n    this.handleChange = this.handleChange.bind(this)\n    this.addTodo = this.addTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n    this.markTodo = this.markTodo.bind(this)\n  }\n  componentDidMount(){\n    const todoData = window.localStorage.getItem('todoapp')\n    if(todoData){\n      const oldTodos = JSON.parse(todoData)\n      this.setState({\n        todos : oldTodos,\n      })\n      this.id = oldTodos[oldTodos.length-1].id + 1\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (prevState.todos !== this.state.todos) {\n      window.localStorage.setItem('todoapp', JSON.stringify(this.state.todos))\n    }\n  } //存進localStorage\n\n  handleChange(e){\n    this.setState({\n      todoText: e.target.value //input 的值\n    })\n  }\n  addTodo() {\n    const { todos, todoText } = this.state\n    //alert(todoText)\n    this.setState({\n      todos: [ ...todos, {\n        id: this.id,\n        isCompleted: false,\n        text: todoText, \n      }],\n      todoText: ''\n    })\n    this.id++\n  }\n  deleteTodo(id) {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  } // 要溝通，要記得傳下去\n  markTodo(id) {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id !== id) {\n          return todo\n        }\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted\n        }\n      })\n    })\n  }\n\n  render(){\n    const { todos, todoText, filter } = this.state\n    //console.log(todos)\n    return(\n      <div className=\"main\">\n        <h1 className=\"title\">\n          ToDo List\n        </h1>\n        <div className=\"input-group mb-3 input_text\">\n          <input type=\"text\" className=\"form-control\" name=\"todos\" placeholder=\"待辦事項\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" \n            value={todoText} \n            onChange={this.handleChange} \n          />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary add_todo\" type=\"button\" onClick={this.addTodo}>+</button>\n          </div>\n        </div>\n        <div className=\"filter\">\n          <button className=\"btn btn-outline-primary filter_all\" onClick={() => {\n            this.setState({\n              filter: 'all'\n            }) //不用 bind，直接用的方法\n          }}>全部</button>\n          <button className=\"btn btn-outline-success filter_complete\" onClick={() => {\n            this.setState({\n              filter: 'completed'\n            })\n          }}>完成</button>\n        </div>\n        <div className=\"list\">\n          {todos\n            .filter(todo => filter === 'completed' ? todo.isCompleted : true)\n            .map(todo => (\n              <Todo \n              key={todo.id} \n              todo={todo} \n              deleteTodo={this.deleteTodo} \n              markTodo={this.markTodo} />\n          ))}\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}